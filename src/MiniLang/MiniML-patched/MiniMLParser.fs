// Implementation file for parser generated by fsyacc
module MiniML.Compiler.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "MiniMLParser.fsy"

open MiniML.Compiler.Ast


# 11 "MiniMLParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | IN
  | END
  | SEMICOLON2
  | LET
  | LPAREN
  | RPAREN
  | COLON
  | FUN
  | IS
  | IF
  | THEN
  | ELSE
  | EQUAL
  | LESS
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | TRUE
  | FALSE
  | STRING of (string)
  | BOOL of (bool)
  | FLOAT of (float)
  | INT of (int)
  | VAR of (string)
  | TARROW
  | TBOOL
  | TFLOAT
  | TINT
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_IN
    | TOKEN_END
    | TOKEN_SEMICOLON2
    | TOKEN_LET
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_COLON
    | TOKEN_FUN
    | TOKEN_IS
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_EQUAL
    | TOKEN_LESS
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_STRING
    | TOKEN_BOOL
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_VAR
    | TOKEN_TARROW
    | TOKEN_TBOOL
    | TOKEN_TFLOAT
    | TOKEN_TINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startexpr
    | NONTERM__starttoplevel
    | NONTERM_toplevel
    | NONTERM_def
    | NONTERM_expr
    | NONTERM_app
    | NONTERM_non_app
    | NONTERM_arithmetic
    | NONTERM_cond
    | NONTERM_ty

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | IN  -> 1 
  | END  -> 2 
  | SEMICOLON2  -> 3 
  | LET  -> 4 
  | LPAREN  -> 5 
  | RPAREN  -> 6 
  | COLON  -> 7 
  | FUN  -> 8 
  | IS  -> 9 
  | IF  -> 10 
  | THEN  -> 11 
  | ELSE  -> 12 
  | EQUAL  -> 13 
  | LESS  -> 14 
  | PLUS  -> 15 
  | MINUS  -> 16 
  | TIMES  -> 17 
  | DIVIDE  -> 18 
  | TRUE  -> 19 
  | FALSE  -> 20 
  | STRING _ -> 21 
  | BOOL _ -> 22 
  | FLOAT _ -> 23 
  | INT _ -> 24 
  | VAR _ -> 25 
  | TARROW  -> 26 
  | TBOOL  -> 27 
  | TFLOAT  -> 28 
  | TINT  -> 29 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_IN 
  | 2 -> TOKEN_END 
  | 3 -> TOKEN_SEMICOLON2 
  | 4 -> TOKEN_LET 
  | 5 -> TOKEN_LPAREN 
  | 6 -> TOKEN_RPAREN 
  | 7 -> TOKEN_COLON 
  | 8 -> TOKEN_FUN 
  | 9 -> TOKEN_IS 
  | 10 -> TOKEN_IF 
  | 11 -> TOKEN_THEN 
  | 12 -> TOKEN_ELSE 
  | 13 -> TOKEN_EQUAL 
  | 14 -> TOKEN_LESS 
  | 15 -> TOKEN_PLUS 
  | 16 -> TOKEN_MINUS 
  | 17 -> TOKEN_TIMES 
  | 18 -> TOKEN_DIVIDE 
  | 19 -> TOKEN_TRUE 
  | 20 -> TOKEN_FALSE 
  | 21 -> TOKEN_STRING 
  | 22 -> TOKEN_BOOL 
  | 23 -> TOKEN_FLOAT 
  | 24 -> TOKEN_INT 
  | 25 -> TOKEN_VAR 
  | 26 -> TOKEN_TARROW 
  | 27 -> TOKEN_TBOOL 
  | 28 -> TOKEN_TFLOAT 
  | 29 -> TOKEN_TINT 
  | 32 -> TOKEN_end_of_input
  | 30 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startexpr 
    | 1 -> NONTERM__starttoplevel 
    | 2 -> NONTERM_toplevel 
    | 3 -> NONTERM_toplevel 
    | 4 -> NONTERM_toplevel 
    | 5 -> NONTERM_toplevel 
    | 6 -> NONTERM_toplevel 
    | 7 -> NONTERM_toplevel 
    | 8 -> NONTERM_toplevel 
    | 9 -> NONTERM_def 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | 13 -> NONTERM_expr 
    | 14 -> NONTERM_expr 
    | 15 -> NONTERM_expr 
    | 16 -> NONTERM_expr 
    | 17 -> NONTERM_app 
    | 18 -> NONTERM_app 
    | 19 -> NONTERM_non_app 
    | 20 -> NONTERM_non_app 
    | 21 -> NONTERM_non_app 
    | 22 -> NONTERM_non_app 
    | 23 -> NONTERM_non_app 
    | 24 -> NONTERM_non_app 
    | 25 -> NONTERM_arithmetic 
    | 26 -> NONTERM_arithmetic 
    | 27 -> NONTERM_arithmetic 
    | 28 -> NONTERM_arithmetic 
    | 29 -> NONTERM_arithmetic 
    | 30 -> NONTERM_arithmetic 
    | 31 -> NONTERM_cond 
    | 32 -> NONTERM_cond 
    | 33 -> NONTERM_ty 
    | 34 -> NONTERM_ty 
    | 35 -> NONTERM_ty 
    | 36 -> NONTERM_ty 
    | 37 -> NONTERM_ty 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 32 
let _fsyacc_tagOfErrorTerminal = 30

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | IN  -> "IN" 
  | END  -> "END" 
  | SEMICOLON2  -> "SEMICOLON2" 
  | LET  -> "LET" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | COLON  -> "COLON" 
  | FUN  -> "FUN" 
  | IS  -> "IS" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | EQUAL  -> "EQUAL" 
  | LESS  -> "LESS" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | STRING _ -> "STRING" 
  | BOOL _ -> "BOOL" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | VAR _ -> "VAR" 
  | TARROW  -> "TARROW" 
  | TBOOL  -> "TBOOL" 
  | TFLOAT  -> "TFLOAT" 
  | TINT  -> "TINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | SEMICOLON2  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | IS  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TARROW  -> (null : System.Object) 
  | TBOOL  -> (null : System.Object) 
  | TFLOAT  -> (null : System.Object) 
  | TINT  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 0us; 65535us; 3us; 65535us; 2us; 3us; 9us; 13us; 12us; 14us; 3us; 65535us; 2us; 7us; 9us; 7us; 12us; 7us; 18us; 65535us; 0us; 1us; 2us; 10us; 9us; 10us; 12us; 10us; 17us; 18us; 23us; 24us; 25us; 26us; 27us; 28us; 38us; 39us; 43us; 44us; 45us; 46us; 54us; 55us; 66us; 60us; 67us; 61us; 68us; 62us; 69us; 63us; 70us; 64us; 71us; 65us; 18us; 65535us; 0us; 20us; 2us; 20us; 9us; 20us; 12us; 20us; 17us; 20us; 23us; 20us; 25us; 20us; 27us; 20us; 38us; 20us; 43us; 20us; 45us; 20us; 54us; 20us; 66us; 20us; 67us; 20us; 68us; 20us; 69us; 20us; 70us; 20us; 71us; 20us; 20us; 65535us; 0us; 19us; 2us; 19us; 9us; 19us; 12us; 19us; 17us; 19us; 19us; 48us; 20us; 47us; 23us; 19us; 25us; 19us; 27us; 19us; 38us; 19us; 43us; 19us; 45us; 19us; 54us; 19us; 66us; 19us; 67us; 19us; 68us; 19us; 69us; 19us; 70us; 19us; 71us; 19us; 18us; 65535us; 0us; 21us; 2us; 21us; 9us; 21us; 12us; 21us; 17us; 21us; 23us; 21us; 25us; 21us; 27us; 21us; 38us; 21us; 43us; 21us; 45us; 21us; 54us; 21us; 66us; 21us; 67us; 21us; 68us; 21us; 69us; 21us; 70us; 21us; 71us; 21us; 18us; 65535us; 0us; 22us; 2us; 22us; 9us; 22us; 12us; 22us; 17us; 22us; 23us; 22us; 25us; 22us; 27us; 22us; 38us; 22us; 43us; 22us; 45us; 22us; 54us; 22us; 66us; 22us; 67us; 22us; 68us; 22us; 69us; 22us; 70us; 22us; 71us; 22us; 4us; 65535us; 33us; 34us; 36us; 37us; 77us; 75us; 78us; 76us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 2us; 6us; 10us; 29us; 48us; 69us; 88us; 107us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 7us; 0us; 27us; 28us; 29us; 30us; 31us; 32us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 4us; 2us; 2us; 6us; 3us; 3us; 4us; 7us; 1us; 3us; 2us; 4us; 7us; 9us; 5us; 6us; 8us; 27us; 28us; 29us; 30us; 31us; 32us; 1us; 5us; 2us; 6us; 8us; 1us; 7us; 1us; 8us; 2us; 9us; 16us; 2us; 9us; 16us; 2us; 9us; 16us; 8us; 9us; 16us; 27us; 28us; 29us; 30us; 31us; 32us; 2us; 10us; 18us; 2us; 11us; 17us; 1us; 12us; 1us; 13us; 1us; 14us; 7us; 14us; 27us; 28us; 29us; 30us; 31us; 32us; 1us; 14us; 7us; 14us; 27us; 28us; 29us; 30us; 31us; 32us; 1us; 14us; 7us; 14us; 27us; 28us; 29us; 30us; 31us; 32us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 2us; 15us; 36us; 1us; 15us; 1us; 15us; 2us; 15us; 36us; 1us; 15us; 7us; 15us; 27us; 28us; 29us; 30us; 31us; 32us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 7us; 16us; 27us; 28us; 29us; 30us; 31us; 32us; 1us; 16us; 7us; 16us; 27us; 28us; 29us; 30us; 31us; 32us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 7us; 24us; 27us; 28us; 29us; 30us; 31us; 32us; 1us; 24us; 2us; 25us; 26us; 1us; 25us; 1us; 26us; 7us; 27us; 27us; 28us; 29us; 30us; 31us; 32us; 7us; 27us; 28us; 28us; 29us; 30us; 31us; 32us; 7us; 27us; 28us; 29us; 29us; 30us; 31us; 32us; 7us; 27us; 28us; 29us; 30us; 30us; 31us; 32us; 7us; 27us; 28us; 29us; 30us; 31us; 31us; 32us; 7us; 27us; 28us; 29us; 30us; 31us; 32us; 32us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 2us; 36us; 36us; 2us; 36us; 37us; 1us; 36us; 1us; 37us; 1us; 37us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 10us; 12us; 14us; 16us; 19us; 22us; 26us; 28us; 31us; 41us; 43us; 46us; 48us; 50us; 53us; 56us; 59us; 68us; 71us; 74us; 76us; 78us; 80us; 88us; 90us; 98us; 100us; 108us; 110us; 112us; 114us; 116us; 118us; 121us; 123us; 125us; 128us; 130us; 138us; 140us; 142us; 144us; 146us; 154us; 156us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 188us; 190us; 193us; 195us; 197us; 205us; 213us; 221us; 229us; 237us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 266us; 269us; 271us; 273us; |]
let _fsyacc_action_rows = 80
let _fsyacc_actionTableElements = [|10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 6us; 49152us; 13us; 70us; 14us; 71us; 15us; 66us; 16us; 67us; 17us; 68us; 18us; 69us; 11us; 32768us; 0us; 4us; 4us; 15us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 0us; 49152us; 0us; 16386us; 0us; 16386us; 0us; 16386us; 2us; 32768us; 0us; 8us; 3us; 9us; 0us; 16387us; 11us; 32768us; 0us; 5us; 4us; 15us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 8us; 32768us; 0us; 11us; 3us; 12us; 13us; 70us; 14us; 71us; 15us; 66us; 16us; 67us; 17us; 68us; 18us; 69us; 0us; 16389us; 11us; 32768us; 0us; 6us; 4us; 15us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 0us; 16391us; 0us; 16392us; 1us; 32768us; 25us; 16us; 1us; 32768us; 13us; 17us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 7us; 16393us; 1us; 45us; 13us; 70us; 14us; 71us; 15us; 66us; 16us; 67us; 17us; 68us; 18us; 69us; 6us; 16394us; 5us; 54us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 6us; 16395us; 5us; 54us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 0us; 16396us; 0us; 16397us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 7us; 32768us; 11us; 25us; 13us; 70us; 14us; 71us; 15us; 66us; 16us; 67us; 17us; 68us; 18us; 69us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 7us; 32768us; 12us; 27us; 13us; 70us; 14us; 71us; 15us; 66us; 16us; 67us; 17us; 68us; 18us; 69us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 6us; 16398us; 13us; 70us; 14us; 71us; 15us; 66us; 16us; 67us; 17us; 68us; 18us; 69us; 1us; 32768us; 25us; 30us; 1us; 32768us; 5us; 31us; 1us; 32768us; 25us; 32us; 1us; 32768us; 7us; 33us; 4us; 32768us; 5us; 78us; 27us; 72us; 28us; 74us; 29us; 73us; 2us; 32768us; 6us; 35us; 26us; 77us; 1us; 32768us; 7us; 36us; 4us; 32768us; 5us; 78us; 27us; 72us; 28us; 74us; 29us; 73us; 2us; 32768us; 9us; 38us; 26us; 77us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 7us; 32768us; 2us; 40us; 13us; 70us; 14us; 71us; 15us; 66us; 16us; 67us; 17us; 68us; 18us; 69us; 0us; 16399us; 1us; 32768us; 25us; 42us; 1us; 32768us; 13us; 43us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 7us; 32768us; 1us; 45us; 13us; 70us; 14us; 71us; 15us; 66us; 16us; 67us; 17us; 68us; 18us; 69us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 4us; 16400us; 15us; 66us; 16us; 67us; 17us; 68us; 18us; 69us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 7us; 32768us; 6us; 56us; 13us; 70us; 14us; 71us; 15us; 66us; 16us; 67us; 17us; 68us; 18us; 69us; 0us; 16408us; 2us; 32768us; 23us; 59us; 24us; 58us; 0us; 16409us; 0us; 16410us; 2us; 16411us; 17us; 68us; 18us; 69us; 2us; 16412us; 17us; 68us; 18us; 69us; 0us; 16413us; 0us; 16414us; 6us; 16415us; 13us; 70us; 14us; 71us; 15us; 66us; 16us; 67us; 17us; 68us; 18us; 69us; 5us; 16416us; 14us; 71us; 15us; 66us; 16us; 67us; 17us; 68us; 18us; 69us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 10us; 32768us; 4us; 41us; 5us; 54us; 8us; 29us; 10us; 23us; 16us; 57us; 19us; 50us; 20us; 51us; 23us; 53us; 24us; 52us; 25us; 49us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 1us; 16420us; 26us; 77us; 2us; 32768us; 6us; 79us; 26us; 77us; 4us; 32768us; 5us; 78us; 27us; 72us; 28us; 74us; 29us; 73us; 4us; 32768us; 5us; 78us; 27us; 72us; 28us; 74us; 29us; 73us; 0us; 16421us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 11us; 18us; 30us; 31us; 32us; 33us; 34us; 37us; 38us; 50us; 59us; 60us; 72us; 73us; 74us; 76us; 78us; 89us; 97us; 104us; 111us; 112us; 113us; 124us; 132us; 143us; 151us; 162us; 169us; 171us; 173us; 175us; 177us; 182us; 185us; 187us; 192us; 195us; 206us; 214us; 215us; 217us; 219us; 230us; 238us; 249us; 254us; 255us; 256us; 257us; 258us; 259us; 260us; 261us; 272us; 280us; 281us; 284us; 285us; 286us; 289us; 292us; 293us; 294us; 301us; 307us; 318us; 329us; 340us; 351us; 362us; 373us; 374us; 375us; 376us; 378us; 381us; 386us; 391us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 2us; 3us; 2us; 3us; 3us; 3us; 4us; 1us; 1us; 1us; 1us; 6us; 12us; 6us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 3us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 9us; 9us; |]
let _fsyacc_immediateActions = [|65535us; 65535us; 65535us; 49152us; 16386us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 16389us; 65535us; 16391us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16399us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 16402us; 16403us; 16404us; 16405us; 16406us; 16407us; 65535us; 65535us; 16408us; 65535us; 16409us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 16418us; 16419us; 65535us; 65535us; 65535us; 65535us; 16421us; |]
let _fsyacc_reductions ()  =    [| 
# 286 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startexpr));
# 295 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> toplevel_decl list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__starttoplevel));
# 304 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "MiniMLParser.fsy"
                                 [] 
                   )
# 50 "MiniMLParser.fsy"
                 : toplevel_decl list));
# 314 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_def in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "MiniMLParser.fsy"
                                     [_1] 
                   )
# 51 "MiniMLParser.fsy"
                 : toplevel_decl list));
# 325 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_def in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "MiniMLParser.fsy"
                                                [_1] 
                   )
# 52 "MiniMLParser.fsy"
                 : toplevel_decl list));
# 336 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "MiniMLParser.fsy"
                                      [Expr _1] 
                   )
# 53 "MiniMLParser.fsy"
                 : toplevel_decl list));
# 347 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "MiniMLParser.fsy"
                                                 [Expr _1] 
                   )
# 54 "MiniMLParser.fsy"
                 : toplevel_decl list));
# 358 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_def in
            let _3 = parseState.GetInput(3) :?> toplevel_decl list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "MiniMLParser.fsy"
                                                     _1 :: _3 
                   )
# 55 "MiniMLParser.fsy"
                 : toplevel_decl list));
# 370 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> expr in
            let _3 = parseState.GetInput(3) :?> toplevel_decl list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "MiniMLParser.fsy"
                                                      (Expr _1) :: _3 
                   )
# 56 "MiniMLParser.fsy"
                 : toplevel_decl list));
# 382 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "MiniMLParser.fsy"
                                                LetBinding ((Name _2), _4) 
                   )
# 59 "MiniMLParser.fsy"
                 : 'gentype_def));
# 394 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_non_app in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "MiniMLParser.fsy"
                                     _1 
                   )
# 63 "MiniMLParser.fsy"
                 : expr));
# 405 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_app in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "MiniMLParser.fsy"
                                 _1 
                   )
# 64 "MiniMLParser.fsy"
                 : expr));
# 416 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_arithmetic in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "MiniMLParser.fsy"
                                        _1 
                   )
# 65 "MiniMLParser.fsy"
                 : expr));
# 427 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_cond in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "MiniMLParser.fsy"
                                  _1 
                   )
# 66 "MiniMLParser.fsy"
                 : expr));
# 438 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> expr in
            let _4 = parseState.GetInput(4) :?> expr in
            let _6 = parseState.GetInput(6) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "MiniMLParser.fsy"
                                                         Cond (_2, _4, _6) 
                   )
# 67 "MiniMLParser.fsy"
                 : expr));
# 451 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> string in
            let _6 = parseState.GetInput(6) :?> 'gentype_ty in
            let _9 = parseState.GetInput(9) :?> 'gentype_ty in
            let _11 = parseState.GetInput(11) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "MiniMLParser.fsy"
                                                                                     Fun (Name _2, Name _4, _6, _9, _11) 
                   )
# 68 "MiniMLParser.fsy"
                 : expr));
# 466 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> expr in
            let _6 = parseState.GetInput(6) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "MiniMLParser.fsy"
                                                        LetIn (Name _2, _4, _6) 
                   )
# 69 "MiniMLParser.fsy"
                 : expr));
# 479 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_app in
            let _2 = parseState.GetInput(2) :?> 'gentype_non_app in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "MiniMLParser.fsy"
                                         Apply (_1, _2) 
                   )
# 73 "MiniMLParser.fsy"
                 : 'gentype_app));
# 491 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_non_app in
            let _2 = parseState.GetInput(2) :?> 'gentype_non_app in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "MiniMLParser.fsy"
                                             Apply (_1, _2) 
                   )
# 74 "MiniMLParser.fsy"
                 : 'gentype_app));
# 503 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "MiniMLParser.fsy"
                                   Var (Name _1) 
                   )
# 78 "MiniMLParser.fsy"
                 : 'gentype_non_app));
# 514 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "MiniMLParser.fsy"
                                  Bool true 
                   )
# 79 "MiniMLParser.fsy"
                 : 'gentype_non_app));
# 524 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "MiniMLParser.fsy"
                                   Bool false 
                   )
# 80 "MiniMLParser.fsy"
                 : 'gentype_non_app));
# 534 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "MiniMLParser.fsy"
                                 Int _1 
                   )
# 81 "MiniMLParser.fsy"
                 : 'gentype_non_app));
# 545 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "MiniMLParser.fsy"
                                   Float _1 
                   )
# 82 "MiniMLParser.fsy"
                 : 'gentype_non_app));
# 556 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "MiniMLParser.fsy"
                                                _2 
                   )
# 83 "MiniMLParser.fsy"
                 : 'gentype_non_app));
# 567 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "MiniMLParser.fsy"
                                       Int (-_2) 
                   )
# 86 "MiniMLParser.fsy"
                 : 'gentype_arithmetic));
# 578 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "MiniMLParser.fsy"
                                         Float (-_2) 
                   )
# 87 "MiniMLParser.fsy"
                 : 'gentype_arithmetic));
# 589 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> expr in
            let _3 = parseState.GetInput(3) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "MiniMLParser.fsy"
                                            Plus (_1, _3) 
                   )
# 88 "MiniMLParser.fsy"
                 : 'gentype_arithmetic));
# 601 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> expr in
            let _3 = parseState.GetInput(3) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "MiniMLParser.fsy"
                                             Minus (_1, _3) 
                   )
# 89 "MiniMLParser.fsy"
                 : 'gentype_arithmetic));
# 613 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> expr in
            let _3 = parseState.GetInput(3) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "MiniMLParser.fsy"
                                             Times(_1, _3) 
                   )
# 90 "MiniMLParser.fsy"
                 : 'gentype_arithmetic));
# 625 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> expr in
            let _3 = parseState.GetInput(3) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "MiniMLParser.fsy"
                                              Divide (_1, _3) 
                   )
# 91 "MiniMLParser.fsy"
                 : 'gentype_arithmetic));
# 637 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> expr in
            let _3 = parseState.GetInput(3) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "MiniMLParser.fsy"
                                             Equal (_1, _3) 
                   )
# 94 "MiniMLParser.fsy"
                 : 'gentype_cond));
# 649 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> expr in
            let _3 = parseState.GetInput(3) :?> expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "MiniMLParser.fsy"
                                            Less (_1, _3) 
                   )
# 95 "MiniMLParser.fsy"
                 : 'gentype_cond));
# 661 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "MiniMLParser.fsy"
                                   TyBool 
                   )
# 98 "MiniMLParser.fsy"
                 : 'gentype_ty));
# 671 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "MiniMLParser.fsy"
                                  TyInt 
                   )
# 99 "MiniMLParser.fsy"
                 : 'gentype_ty));
# 681 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "MiniMLParser.fsy"
                                    TyFloat 
                   )
# 100 "MiniMLParser.fsy"
                 : 'gentype_ty));
# 691 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ty in
            let _3 = parseState.GetInput(3) :?> 'gentype_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "MiniMLParser.fsy"
                                          TyFun (_1, _3) 
                   )
# 101 "MiniMLParser.fsy"
                 : 'gentype_ty));
# 703 "MiniMLParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_ty in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "MiniMLParser.fsy"
                                              _2 
                   )
# 102 "MiniMLParser.fsy"
                 : 'gentype_ty));
|]
# 715 "MiniMLParser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 33;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let expr lexer lexbuf : expr =
    engine lexer lexbuf 0 :?> _
let toplevel lexer lexbuf : toplevel_decl list =
    engine lexer lexbuf 2 :?> _
